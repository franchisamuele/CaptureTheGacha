{
	"info": {
		"_postman_id": "0c5609c2-d3a2-4025-a01d-db3acd62e64e",
		"name": "AuctionIntegrationTesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39700120"
	},
	"item": [
		{
			"name": "register1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Registered (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}1\",\n    \"password\": \"{{password}}1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Registered (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}2\",\n    \"password\": \"{{password}}2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Registered (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}3\",\n    \"password\": \"{{password}}3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "login1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Logged in (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Check if 'token' field exists in the JSON response and save it in the environment if it exists\", function () {",
							"    pm.response.to.have.jsonBody('token');",
							"    if (pm.response.json().hasOwnProperty('token')) {",
							"        pm.environment.set(\"token1\", pm.response.json().token);",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}1\",\n    \"password\": \"{{password}}1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Logged in (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Check if 'token' field exists in the JSON response and save it in the environment if it exists\", function () {",
							"    pm.response.to.have.jsonBody('token');",
							"    if (pm.response.json().hasOwnProperty('token')) {",
							"        pm.environment.set(\"token2\", pm.response.json().token);",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}2\",\n    \"password\": \"{{password}}2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Logged in (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Check if 'token' field exists in the JSON response and save it in the environment if it exists\", function () {",
							"    pm.response.to.have.jsonBody('token');",
							"    if (pm.response.json().hasOwnProperty('token')) {",
							"        pm.environment.set(\"token3\", pm.response.json().token);",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}3\",\n    \"password\": \"{{password}}3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "recharge1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Recharged (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/recharge/1/1500",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"recharge",
						"1",
						"1500"
					]
				}
			},
			"response": []
		},
		{
			"name": "roll1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Rolled (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/roll",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"roll"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_gacha_rolled",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify response array length is 1\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array').that.has.lengthOf(1);",
							"});",
							"",
							"pm.test(\"Extract and set gacha_id value in environment variable\", function () {",
							"    pm.environment.set(\"gacha_id\", pm.response.json()[0].gacha_id);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/collection",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"collection"
					]
				}
			},
			"response": []
		},
		{
			"name": "sell_not_acquired_gacha",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Gacha not in collection (404)\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"gacha_id\": 1234,\n  \"base_price\": 10,\n  \"expiration_timestamp\": 2145920400\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auctions/sell",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auctions",
						"sell"
					]
				}
			},
			"response": []
		},
		{
			"name": "sell_base_price_0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Base price must be strictly positive (400)\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"gacha_id\": {{gacha_id}},\n  \"base_price\": 0,\n  \"expiration_timestamp\": 2145920400\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auctions/sell",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auctions",
						"sell"
					]
				}
			},
			"response": []
		},
		{
			"name": "sell_expiration_timestamp_past",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Expiration timestamp is in the past (400)\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"gacha_id\": {{gacha_id}},\n  \"base_price\": 10,\n  \"expiration_timestamp\": 1234\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auctions/sell",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auctions",
						"sell"
					]
				}
			},
			"response": []
		},
		{
			"name": "sell",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp in seconds (UTC)",
							"let currentTimestamp = Math.floor(Date.now() / 1000);",
							"",
							"// Add 30 seconds for expiration",
							"let expirationTimestamp = currentTimestamp + 30;",
							"",
							"// Save the expiration timestamp",
							"pm.environment.set(\"expiration_timestamp\", expirationTimestamp);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Auction created (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"gacha_id\": {{gacha_id}},\n  \"base_price\": 10,\n  \"expiration_timestamp\": {{expiration_timestamp}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auctions/sell",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auctions",
						"sell"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_collection_empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Empty collection (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json()).to.eql([]);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/collection",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"collection"
					]
				}
			},
			"response": []
		},
		{
			"name": "bid_no_funds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Not enough funds (400)\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auctions/bid/1/100",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auctions",
						"bid",
						"1",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "self_bid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"You cannot self-bid (400)\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auctions/bid/1/100",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auctions",
						"bid",
						"1",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "recharge2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Recharged (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/recharge/2/100",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"recharge",
						"2",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "recharge3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Recharged (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/recharge/3/200",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"recharge",
						"3",
						"200"
					]
				}
			},
			"response": []
		},
		{
			"name": "bid2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bidded successfully (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auctions/bid/1/100",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auctions",
						"bid",
						"1",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "check_auctions2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"I am involved in 1 auction\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array').that.has.lengthOf(1);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auctions/personal",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auctions",
						"personal"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_balance2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Balance is correct (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json().balance).to.equal(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/balance",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"balance"
					]
				}
			},
			"response": []
		},
		{
			"name": "bid3_not_highest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bid is not the highest (400)\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token3}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auctions/bid/1/100",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auctions",
						"bid",
						"1",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_balance3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Balance is correct (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json().balance).to.equal(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token3}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/balance",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"balance"
					]
				}
			},
			"response": []
		},
		{
			"name": "bid3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bidded succesfully (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token3}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auctions/bid/1/200",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auctions",
						"bid",
						"1",
						"200"
					]
				}
			},
			"response": []
		},
		{
			"name": "check_auctions2_empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"I am involved in 0 auctions\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array').that.has.lengthOf(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auctions/personal",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auctions",
						"personal"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_balance2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Balance is correct (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json().balance).to.equal(100);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/balance",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"balance"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_balance3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Balance is correct (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json().balance).to.equal(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token3}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/balance",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"balance"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_collection_success3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains 2 gachas\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array').that.has.lengthOf(1);",
							"});",
							"",
							"pm.test(\"Collection contains the gacha I bidded on\", function () {",
							"    pm.expect(pm.response.json()).to.deep.include({ \"gacha_id\": pm.environment.get(\"gacha_id\"), \"quantity\": 1 });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Log a message to indicate the wait has started",
							"console.log(\"Waiting for auction to close...\");",
							"",
							"setTimeout(() => {}, 45000); // 45 seconds delay"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token3}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/collection",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"collection"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_balance_success1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sold the gacha (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json().balance).to.equal(1200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/balance",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"balance"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_collection_empty2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Lost bid (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json()).to.eql([]);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/collection",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"collection"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_collection_empty1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sold gacha (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json()).to.eql([]);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/players/collection",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"players",
						"collection"
					]
				}
			},
			"response": []
		}
	]
}