services:
  player:
    hostname: ${PLAYER_HOST}
    build: ./services/Player
    depends_on:
      player-db:
        condition: service_healthy
    env_file: .env
    secrets:
      - source: player-cert
        target: cert
      - source: player-key
        target: key
      - jwt-public-key

  player-db:
    image: mysql:8-oracle
    hostname: ${PLAYER_DB_HOST}
    env_file: .env
    restart: always
    volumes:
      - ase-player-db:/var/lib/mysql
      - .docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - source: player-cert
        target: cert
      - source: player-key
        target: key
    healthcheck:
      test: mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD -e "USE ${MYSQL_DB}"
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    command: >
      mysqld
      --log-error-verbosity=1
      --ssl-cert=${CERT_PATH}
      --ssl-key=${KEY_PATH}
      --require_secure_transport=ON


  auction:
    hostname: ${AUCTION_HOST}
    platform: linux/amd64
    build: ./services/Auction
    depends_on:
      auction-db:
        condition: service_healthy
    env_file: .env
    secrets:
      - source: auction-cert
        target: cert
      - source: auction-key
        target: key
      - jwt-public-key

  auction-db:
    image: mysql:8-oracle
    hostname: ${AUCTION_DB_HOST}
    env_file: .env
    restart: always
    volumes:
      - ase-auction-db:/var/lib/mysql
      - .docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - source: auction-cert
        target: cert
      - source: auction-key
        target: key
    healthcheck:
      test: mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD -e "USE ${MYSQL_DB}"
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    command: >
      mysqld
      --log-error-verbosity=1
      --ssl-cert=${CERT_PATH}
      --ssl-key=${KEY_PATH}
      --require_secure_transport=ON


  auth:
    hostname: ${AUTH_HOST}
    build: ./services/Auth
    depends_on:
      auth-db:
        condition: service_healthy
    env_file: .env
    secrets:
      - source: auth-cert
        target: cert
      - source: auth-key
        target: key
      - jwt-public-key
      - jwt-private-key

  auth-db:
    image: mysql:8-oracle
    hostname: ${AUTH_DB_HOST}
    env_file: .env
    restart: always
    volumes:
      - ase-auth-db:/var/lib/mysql
      - .docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - source: auth-cert
        target: cert
      - source: auth-key
        target: key
    healthcheck:
      test: mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD -e "USE ${MYSQL_DB}"
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    command: >
      mysqld
      --log-error-verbosity=1
      --ssl-cert=${CERT_PATH}
      --ssl-key=${KEY_PATH}
      --require_secure_transport=ON


  gacha:
    hostname: ${GACHA_HOST}
    build: ./services/Gacha
    depends_on:
      gacha-db:
        condition: service_healthy
    volumes:
      - ./services/Gacha/images:/app/images
    env_file: .env
    secrets:
      - source: gacha-cert
        target: cert
      - source: gacha-key
        target: key
      - jwt-public-key

  gacha-db:
    image: mysql:8-oracle
    hostname: ${GACHA_DB_HOST}
    env_file: .env
    restart: always
    volumes:
      - ase-gacha-db:/var/lib/mysql
      - .docker/gacha_init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - source: gacha-cert
        target: cert
      - source: gacha-key
        target: key
    healthcheck:
      test: mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD -e "USE ${MYSQL_DB}"
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    command: >
      mysqld
      --log-error-verbosity=1
      --ssl-cert=${CERT_PATH}
      --ssl-key=${KEY_PATH}
      --require_secure_transport=ON


  nginx:
    image: nginx:alpine
    depends_on:
      - player
      - auction
      - auth
      - gacha
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - '443:443'
      - '80:80'
    secrets:
      - source: nginx-cert
        target: /etc/nginx/ssl/cert.pem
      - source: nginx-key
        target: /etc/nginx/ssl/key.pem



secrets:
  player-cert:
    file: ./certs/player-cert.pem
  player-key:
    file: ./certs/player-key.pem
  auction-cert:
    file: ./certs/auction-cert.pem
  auction-key:
    file: ./certs/auction-key.pem
  gacha-cert:
    file: ./certs/gacha-cert.pem
  gacha-key:
    file: ./certs/gacha-key.pem
  auth-cert:
    file: ./certs/auth-cert.pem
  auth-key:
    file: ./certs/auth-key.pem
  jwt-public-key:
    file: ./secrets/jwt-public-key.pub
  jwt-private-key:
    file: ./secrets/jwt-private-key.pem
  nginx-cert:
    file: ./certs/nginx-cert.pem
  nginx-key:
    file: ./certs/nginx-key.pem

volumes:
  ase-player-db:
  ase-auction-db:
  ase-gacha-db:
  ase-auth-db:



# api-gateway:
#   hostname: ${API_GATEWAY_HOST}
#   build:
#     context: .
#     dockerfile: ./services/Gateway/Dockerfile
#   depends_on:
#     - player
#     - auction
#     - auth
#     - gacha
#   ports:
#     - '5000:5000'
#   env_file: .env
#   secrets:
#     - source: gateway-cert
#       target: cert
#     - source: gateway-key
#       target: key
#   healthcheck:
#     test: curl -f https://${PLAYER_HOST}:5000 && curl -f https://${AUCTION_HOST}:5000
#     interval: 10s
#     retries: 10
#     start_period: 30s
#     timeout: 10s
#   networks:
#     - public
#     - private

# api-gateway-admin:
#   hostname: ${API_GATEWAY_ADMIN_HOST}
#   build: ./services/AdminGateway
#   depends_on:
#     - auth
#     - gacha
#   restart: always
#   ports:
#     - "5001:5001"
#   env_file: .env
#   secrets:
#     - source: admin-gateway-cert
#       target: cert
#     - source: admin-gateway-key
#       target: key
#   networks:
#     - private
