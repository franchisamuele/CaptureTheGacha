services:
  player:
    hostname: ${PLAYER_HOST}
    build: ./services/Player
    image: lorebando/gacha-world:player-tagname
    depends_on:
      player-db:
        condition: service_healthy
    env_file: .env
    secrets:
      - source: player-cert
        target: cert
      - source: player-key
        target: key
      - jwt-public-key
    networks:
      - private

  player-db:
    image: mysql:8
    hostname: ${PLAYER_DB_HOST}
    env_file: .env
    restart: always
    volumes:
      - ase-player-db:/var/lib/mysql
      - .docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - source: player-cert
        target: cert
      - source: player-key
        target: key
    healthcheck:
      test: mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD -e "USE ${MYSQL_DB}"
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    command: >
      mysqld
      --log-error-verbosity=1
      --ssl-cert=${CERT_PATH}
      --ssl-key=${KEY_PATH}
      --require_secure_transport=ON
    networks:
      - private

  auction:
    hostname: ${AUCTION_HOST}
    platform: linux/amd64
    build: ./services/Auction
    image: lorebando/gacha-world:auction-tagname
    depends_on:
      auction-db:
        condition: service_healthy
    env_file: .env
    secrets:
      - source: auction-cert
        target: cert
      - source: auction-key
        target: key
      - jwt-public-key
    networks:
      - private

  auction-db:
    image: mysql:8
    hostname: ${AUCTION_DB_HOST}
    env_file: .env
    restart: always
    volumes:
      - ase-auction-db:/var/lib/mysql
      - .docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - source: auction-cert
        target: cert
      - source: auction-key
        target: key
    healthcheck:
      test: mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD -e "USE ${MYSQL_DB}"
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    command: >
      mysqld
      --log-error-verbosity=1
      --ssl-cert=${CERT_PATH}
      --ssl-key=${KEY_PATH}
      --require_secure_transport=ON
    networks:
      - private

  api-gateway:
    hostname: ${API_GATEWAY_HOST}
    build:
      context: .
      dockerfile: ./services/Gateway/Dockerfile
    image: lorebando/gacha-world:api-gateway-tagname
    depends_on:
      - player
      - auction
      - auth
      - gacha
    ports:
      - '5000:5000'
    env_file: .env
    secrets:
      - source: gateway-cert
        target: cert
      - source: gateway-key
        target: key
    healthcheck:
      test: curl -f https://${PLAYER_HOST}:5000 && curl -f https://${AUCTION_HOST}:5000
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    networks:
      - public
      - private

  api-gateway-admin:
    hostname: ${API_GATEWAY_ADMIN_HOST}
    build: ./services/AdminGateway
    image: lorebando/gacha-world:api-gateway-admin-tagname
    depends_on:
      - auth
      - gacha
    restart: always
    ports:
      - "5001:5001"
    env_file: .env
    secrets:
      - source: admin-gateway-cert
        target: cert
      - source: admin-gateway-key
        target: key
    networks:
      - private

  auth:
    hostname: ${AUTH_HOST}
    build: ./services/Auth
    image: lorebando/gacha-world:auth-tagname
    depends_on:
      auth-db:
        condition: service_healthy
    env_file: .env
    secrets:
      - source: auth-cert
        target: cert
      - source: auth-key
        target: key
      - jwt-public-key
      - jwt-private-key
    networks:
      - private

  auth-db:
    image: mysql:8
    hostname: ${AUTH_DB_HOST}
    env_file: .env
    restart: always
    volumes:
      - ase-auth-db:/var/lib/mysql
      - .docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - source: auth-cert
        target: cert
      - source: auth-key
        target: key
    healthcheck:
      test: mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD -e "USE ${MYSQL_DB}"
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    command: >
      mysqld
      --log-error-verbosity=1
      --ssl-cert=${CERT_PATH}
      --ssl-key=${KEY_PATH}
      --require_secure_transport=ON
    networks:
      - private

  gacha:
    hostname: ${GACHA_HOST}
    build: ./services/Gacha
    image: lorebando/gacha-world:gacha-tagname
    depends_on:
      gacha-db:
        condition: service_healthy
    volumes:
      - ./services/Gacha/images:/app/images
    env_file: .env
    secrets:
      - source: gacha-cert
        target: cert
      - source: gacha-key
        target: key
      - jwt-public-key
    networks:
      - private

  gacha-db:
    image: mysql:8
    hostname: ${GACHA_DB_HOST}
    env_file: .env
    restart: always
    volumes:
      - ase-gacha-db:/var/lib/mysql
      - .docker/gacha_init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - source: gacha-cert
        target: cert
      - source: gacha-key
        target: key
    healthcheck:
      test: mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD -e "USE ${MYSQL_DB}"
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    command: >
      mysqld
      --log-error-verbosity=1
      --ssl-cert=${CERT_PATH}
      --ssl-key=${KEY_PATH}
      --require_secure_transport=ON
    networks:
      - private

  bandit:
    image: python:3.9
    volumes:
      - ./:/app
    working_dir: /app
    command: >
      sh -c "pip install bandit && bandit -r ./services"
    networks:
      - private
    profiles:
      - security

  pip-audit:
    image: python:3.9
    volumes:
      - ./services:/app/services
    working_dir: /app
    command: >
      sh -c "pip install pip-audit && find ./services -name 'requirements.txt' -exec pip-audit -r {} \\;"
    networks:
      - private
    profiles:
      - security

secrets:
  player-cert:
    file: ./certs/player-cert.pem
  player-key:
    file: ./certs/player-key.pem
  auction-cert:
    file: ./certs/auction-cert.pem
  auction-key:
    file: ./certs/auction-key.pem
  gacha-cert:
    file: ./certs/gacha-cert.pem
  gacha-key:
    file: ./certs/gacha-key.pem
  gateway-cert:
    file: ./certs/gateway-cert.pem
  gateway-key:
    file: ./certs/gateway-key.pem
  admin-gateway-cert:
    file: ./certs/admin-gateway-cert.pem
  admin-gateway-key:
    file: ./certs/admin-gateway-key.pem
  auth-cert:
    file: ./certs/auth-cert.pem
  auth-key:
    file: ./certs/auth-key.pem
  jwt-public-key:
    file: ./secrets/jwt-public-key.pub
  jwt-private-key:
    file: ./secrets/jwt-private-key.pem

volumes:
  ase-player-db:
  ase-auction-db:
  ase-gacha-db:
  ase-auth-db:

networks:
  private:
    driver: bridge
  public:
    driver: bridge
